# name: CD pipeline

# on:
#   workflow_run:
#     workflows: ["CI pipeline"]
#     types:
#       - completed

# jobs:
#   Pull-Images-and-Deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v5
#       - name: Configure AWS
#         uses: aws-actions/configure-aws-credentials@v5.0.0
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to ECR
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Get version from triggering workflow
#         id: get-version
#         run: |
#           echo "version=${{ github.event.workflow_run.head_branch}}" >> $GITHUB_OUTPUT
#           echo "Deploying version: ${{ github.event.workflow_run.head_branch }}"

#       - name: Deploy to EC2
#         env:
#           ECR_REGISTRY: ${{ secrets.ECR_REGISTRY}}
#           VERSION_TAG: ${{ steps.get-version.outputs.version }}
#           FRONTEND_IMAGE: frontend-${{ github.event.workflow_run.head_branch }}
#           BACKEND_IMAGE: backend-${{ github.event.workflow_run.head_branch }}
#         run: |
#           echo "${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}"
#           echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
#           chmod 600 private_key.pem

#           if  ! ssh-keygen -y -f private_key.pem > /dev/null 2>&1; then
#             echo "Error: Invalid SSH key format"
#             cat private_key.pem
#             exit 1
#           fi

#           echo "SSH started"

#           ssh -i private_key.pem -o StrictHostKeyChecking=no \
#             ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'

#           echo "Connected through SSH"

#             aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
#               sudo docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            
#             echo "Pulling backend Image: ${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}"
#             sudo docker pull ${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}

#             echo "Pulling frontend Image: ${{ secrets.ECR_REGISTRY }}:${{ env.FRONTEND_IMAGE }}"
#             sudo docker pull ${{ secrets.ECR_REGISTRY }}:${{ env.FRONTEND_IMAGE }}

#             echo "Stopping old backend container.."
#             sudo docker stop backend || true
#             sudo docker rm backend || true

#             echo "Stopping old frontend container.."
#             sudo docker stop frontend || true
#             sudo docker rm frontend || true

#             echo "Deleting the older network if exists"
#             sudo docker network rm expenzox || true

#             echo "Creating network"
#             sudo docker network create expenzox

#             echo "Starting new backend container..."
#             sudo docker run -d --name=backend --network=expenzox --restart unless-stopped  -p 8000:8000 ${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}


#             echo "Starting a new Frontend Container"
#             sudo docker run -d --name=frontend --network=expenzox --restart unless-stopped  -p 80:80  ${{ secrets.ECR_REGISTRY }}:${{ env.FRONTEND_IMAGE }}

#             echo "Verifying containers..."
#             sudo docker ps | grep -E 'backend|frontend'

#             echo "Cleaning up old images..."
#             sudo docker image prune -af

#             echo "Deployment completed successfully!"
#           EOF

#           rm -f private_key.pem

#       - name: Deployment Status
#         if: success()
#         run: echo "Deployment to EC2 completed"

#       - name: Deployment Failed
#         if: failure()
#         run: echo "Deployment to EC2 failed."


name: CD pipeline

on:
  workflow_run:
    workflows: ["CI pipeline"]
    types:
      - completed

jobs:
  Pull-Images-and-Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get version from triggering workflow
        id: get-version
        run: |
          echo "version=${{ github.event.workflow_run.head_branch}}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${{ github.event.workflow_run.head_branch }}"

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          VERSION_TAG: ${{ steps.get-version.outputs.version }}
          FRONTEND_IMAGE: frontend-${{ github.event.workflow_run.head_branch }}
          BACKEND_IMAGE: backend-${{ github.event.workflow_run.head_branch }}
        run: |
          echo "${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}"
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          if  ! ssh-keygen -y -f private_key.pem > /dev/null 2>&1; then
            echo "Error: Invalid SSH key format"
            cat private_key.pem
            exit 1
          fi

          echo "Starting SSH session..."

          # First SSH as root/ubuntu to ensure dockeruser exists
          ssh -i private_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Connected as initial user, setting up dockeruser..."

          # -----------------------------------------------------------
          # ðŸ§© Create Docker User (if not exists)
          # -----------------------------------------------------------
            if id "dockeruser" &>/dev/null; then
              echo "User dockeruser already exists."
            else
              echo "Creating dockeruser..."
              sudo adduser --disabled-password --gecos "" dockeruser
              sudo usermod -aG docker dockeruser
              sudo usermod -aG sudo dockeruser
              echo "dockeruser ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/dockeruser
            fi

            echo "Setting up SSH for docker user"

            sudo mkdir -p /home/dockeruser/.ssh
            sudo chmod 700 /home/dockeruser/.ssh
            if [ -f ~/.ssh/authorized_keys ]; then
              sudo cp ~/.ssh/authorized_keys /home/dockeruser/.ssh/authorized_keys
              sudo chmod 600 /home/dockeruser/.ssh/authorized_keys
              sudo chown -R dockeruser:dockeruser /home/dockeruser/.ssh
              echo "SSH key copied from $USER to dockeruser."
            else
              echo "Warning: ~/.ssh/authorized_keys not found for $USER!"
            fi

            # Restart Docker service to apply permissions
            sudo systemctl restart docker

            echo "Docker user setup complete!"
          EOF

          echo "Reconnecting as dockeruser for deployment..."

          # Now deploy as dockeruser (non-root)
          ssh -i private_key.pem -o StrictHostKeyChecking=no \
            dockeruser@${{ secrets.EC2_HOST }} << 'EOF'

            # cd /
            # sudo su - dockeruser

              echo "Connected as dockeruser. Starting deployment..."

              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
                docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          
              echo "Pulling backend Image: ${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}"
              docker pull ${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}

              echo "Pulling frontend Image: ${{ secrets.ECR_REGISTRY }}:${{ env.FRONTEND_IMAGE }}"
              docker pull ${{ secrets.ECR_REGISTRY }}:${{ env.FRONTEND_IMAGE }}

              echo "Stopping old backend container..."
              docker stop backend || true
              docker rm backend || true

              echo "Stopping old frontend container..."
              docker stop frontend || true
              docker rm frontend || true

              echo "Deleting the older network if exists..."
              docker network rm expenzox || true

              echo "Creating new network..."
              docker network create expenzox

              echo "Starting backend container..."
              docker run -d --name=backend --network=expenzox --restart unless-stopped ${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}

              echo "Starting frontend container..."
              docker run -d --name=frontend --network=expenzox --restart unless-stopped -p 80:80 ${{ secrets.ECR_REGISTRY }}:${{ env.FRONTEND_IMAGE }}

              echo "Verifying containers..."
              docker ps | grep -E 'backend|frontend'

              echo "Cleaning up old images..."
              docker image prune -af

              echo "âœ… Deployment completed successfully!"
          EOF
          rm -f private_key.pem

      - name: Deployment Status
        if: success()
        run: echo "Deployment to EC2 completed"

      - name: Deployment Failed
        if: failure()
        run: echo "Deployment to EC2 failed."

