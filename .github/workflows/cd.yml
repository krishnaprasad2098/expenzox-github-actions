name: CD pipeline

on:
  workflow_run:
    workflows: ["CI pipeline"]
    types:
      - completed

jobs:
  Pull-Images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get version from triggering workflow
        id: get-version
        run: |
          echo "version=${{ github.event.workflow_run.head_branch}}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${{ github.event.workflow_run.head_branch }}"

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY}}
          VERSION_TAG: ${{ steps.get-version.outputs.version }}
          FRONTEND_IMAGE: frontend-${{ github.event.workflow_run.head_branch }}
          BACKEND_IMAGE: backend-${{ github.event.workflow_run.head_branch }}
        run: |
          echo "${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}"
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          if  ! ssh-keygen -y -f private_key.pem > /dev/null 2>&1; then
            echo "Error: Invalid SSH key format"
            cat private_key.pem
            exit 1
          fi

          echo "SSH started"

          ssh -i private_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'

          echo "Connected through SSH"

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
              sudo docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            
            echo "Pulling backend Image: ${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}"
            sudo docker pull ${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}

            echo "Pulling frontend Image: ${{ secrets.ECR_REGISTRY }}:${{ env.FRONTEND_IMAGE }}"
            sudo docker pull ${{ secrets.ECR_REGISTRY }}:${{ env.FRONTEND_IMAGE }}

            echo "Stopping old backend container.."
            sudo docker stop backend || true
            sudo docker rm -f backend || true

            echo "Stopping old frontend container.."
            sudo docker stop frontend || true
            sudo docker rm -f frontend || true

            sudo docker network create expenzox

            echo "Starting new backend container..."
            sudo docker run -d --name=backend --network=expenzox --restart unless-stopped -p 8000:8000 ${{ secrets.ECR_REGISTRY }}:${{ env.BACKEND_IMAGE }}


            echo "Starting a new Frontend Container"
            sudo docker run -d --name=frontend --network=expenzox --restart unless-stopped -p 80:80  ${{ secrets.ECR_REGISTRY }}:${{ env.FRONTEND_IMAGE }}

            echo "Verifying containers..."
            sudo docker ps | grep -E 'backend|frontend'

            echo "Cleaning up old images..."
            sudo docker image prune -af

            echo "Deployment completed successfully!"
          EOF

          rm -f private_key.pem

      - name: Deployment Status
        if: success()
        run: echo "Deployment to EC2 completed"

      - name: Deployment Failed
        if: failure()
        run: echo "Deployment to EC2 failed."
